'use client'

import { useState, useEffect } from 'react'
import { ServiceCategory, LeadStatus } from '@prisma/client'
import { showToast } from '@/lib/toast'

interface Lead {
  id: string
  firstName: string
  lastName: string
  email: string
  phone: string
  city: string
  state: string
  serviceInterest: ServiceCategory
  status: LeadStatus
  leadScore: number
  tier: number
  contactCount: number
  campaign?: string | null
  propertyValue?: number | null
  createdAt: string
  updatedAt: string
}

interface Filters {
  search: string
  scoreMin: number
  scoreMax: number
  tiers: number[]
  statuses: LeadStatus[]
  service: ServiceCategory | 'all'
  campaign: string | 'all'
}

export default function LeadsPage() {
  const [leads, setLeads] = useState<Lead[]>([])
  const [loading, setLoading] = useState(true)
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [totalCount, setTotalCount] = useState(0)
  const [sortBy, setSortBy] = useState<'leadScore' | 'tier' | 'createdAt'>('leadScore')
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc')
  const [campaigns, setCampaigns] = useState<string[]>([])
  
  const [filters, setFilters] = useState<Filters>({
    search: '',
    scoreMin: 0,
    scoreMax: 100,
    tiers: [],
    statuses: [],
    service: 'all',
    campaign: 'all',
  })

  useEffect(() => {
    fetchLeads()
  }, [currentPage, sortBy, sortOrder, filters])

  const fetchLeads = async () => {
    try {
      setLoading(true)
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '50',
        sortBy,
        sortOrder,
        ...(filters.search && { search: filters.search }),
        ...(filters.statuses.length > 0 && { status: filters.statuses.join(',') }),
        ...(filters.tiers.length > 0 && { tier: filters.tiers.join(',') }),
        ...(filters.service !== 'all' && { serviceInterest: filters.service }),
      })
      
      const response = await fetch(`/api/leads?${params.toString()}`)
      if (!response.ok) {
        throw new Error('Failed to fetch leads')
      }
      const data = await response.json()
      setLeads(data.leads || [])
      setTotalPages(data.pagination?.totalPages || 1)
      setTotalCount(data.pagination?.total || 0)
      
      const uniqueCampaigns = Array.from(
        new Set(data.leads.map((l: Lead) => l.campaign).filter(Boolean))
      ) as string[]
      setCampaigns(uniqueCampaigns)
    } catch (error) {
      console.error('Error fetching leads:', error)
      showToast.error('Failed to fetch leads')
    } finally {
      setLoading(false)
    }
  }

  const exportToCSV = () => {
    if (leads.length === 0) {
      showToast.error('No leads to export')
      return
    }

    const headers = ['Score', 'Tier', 'Name', 'Email', 'City', 'State', 'Service', 'Status', 'Campaign', 'Contact Count', 'Created']
    const rows = leads.map(lead => [
      lead.leadScore,
      `T${lead.tier}`,
      `${lead.firstName} ${lead.lastName}`,
      lead.email,
      lead.city,
      lead.state,
      lead.serviceInterest,
      lead.status,
      lead.campaign || '-',
      lead.contactCount || 0,
      new Date(lead.createdAt).toLocaleDateString()
    ])

    const csvContent = [
      headers.join(','),
      ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `leads-export-${new Date().toISOString().split('T')[0]}.csv`
    link.click()
    window.URL.revokeObjectURL(url)

    showToast.success(`Exported ${leads.length} leads`)
  }

  const getScoreColor = (score: number) => {
    if (score >= 70) return 'text-green-600 bg-green-50'
    if (score >= 50) return 'text-amber-600 bg-amber-50'
    return 'text-orange-600 bg-orange-50'
  }

  const getTierColor = (tier: number) => {
    if (tier === 1) return 'bg-purple-100 text-purple-700'
    if (tier === 2) return 'bg-blue-100 text-blue-700'
    return 'bg-gray-100 text-gray-700'
  }

  const getStatusColor = (status: LeadStatus) => {
    switch (status) {
      case 'new': return 'bg-blue-100 text-blue-700'
      case 'contacted': return 'bg-yellow-100 text-yellow-700'
      case 'replied': return 'bg-green-100 text-green-700'
      case 'matched': return 'bg-purple-100 text-purple-700'
      case 'converted': return 'bg-emerald-100 text-emerald-700'
      case 'unqualified': return 'bg-red-100 text-red-700'
      default: return 'bg-gray-100 text-gray-700'
    }
  }

  const formatRelativeTime = (dateString: string) => {
    const date = new Date(dateString)
    const now = new Date()
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000)
    
    if (diffInSeconds < 60) return 'just now'
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`
    if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`
    return date.toLocaleDateString()
  }

  const updateFilter = (key: keyof Filters, value: any) => {
    setFilters(prev => ({ ...prev, [key]: value }))
    setCurrentPage(1)
  }

  const toggleArrayFilter = (key: 'tiers' | 'statuses', value: any) => {
    setFilters(prev => {
      const current = prev[key] as any[]
      const updated = current.includes(value)
        ? current.filter(v => v !== value)
        : [...current, value]
      return { ...prev, [key]: updated }
    })
    setCurrentPage(1)
  }

  const clearFilters = () => {
    setFilters({
      search: '',
      scoreMin: 0,
      scoreMax: 100,
      tiers: [],
      statuses: [],
      service: 'all',
      campaign: 'all',
    })
    setCurrentPage(1)
    showToast.success('Filters cleared')
  }

  const hasActiveFilters = 
    filters.search !== '' ||
    filters.tiers.length > 0 ||
    filters.statuses.length > 0 ||
    filters.service !== 'all' ||
    filters.campaign !== 'all' ||
    filters.scoreMin > 0 ||
    filters.scoreMax < 100

  if (loading && leads.length === 0) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading leads...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex h-screen bg-gray-50">
      <aside className="w-72 bg-white border-r border-gray-200 overflow-y-auto">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-lg font-semibold text-gray-900">Filters</h2>
            {hasActiveFilters && (
              <button onClick={clearFilters} className="text-xs text-indigo-600 hover:text-indigo-700 font-medium">
                Clear all
              </button>
            )}
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">Search</label>
            <div className="relative">
              <input
                type="text"
                placeholder="Name, email, city..."
                value={filters.search}
                onChange={(e) => updateFilter('search', e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              />
              <svg className="w-5 h-5 absolute left-3 top-2.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              AI Score Range: {filters.scoreMin} - {filters.scoreMax}
            </label>
            <div className="flex gap-2">
              <input type="number" min="0" max="100" value={filters.scoreMin} onChange={(e) => updateFilter('scoreMin', parseInt(e.target.value))} className="w-20 px-2 py-1 border border-gray-300 rounded text-sm" />
              <span className="self-center text-gray-500">to</span>
              <input type="number" min="0" max="100" value={filters.scoreMax} onChange={(e) => updateFilter('scoreMax', parseInt(e.target.value))} className="w-20 px-2 py-1 border border-gray-300 rounded text-sm" />
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-3">Tier</label>
            <div className="space-y-2">
              {[1, 2, 3].map(tier => (
                <label key={tier} className="flex items-center">
                  <input type="checkbox" checked={filters.tiers.includes(tier)} onChange={() => toggleArrayFilter('tiers', tier)} className="w-4 h-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" />
                  <span className="ml-2 text-sm text-gray-700">Tier {tier}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-3">Status</label>
            <div className="space-y-2">
              {['new', 'contacted', 'replied', 'matched', 'converted', 'unqualified'].map(status => (
                <label key={status} className="flex items-center">
                  <input type="checkbox" checked={filters.statuses.includes(status as LeadStatus)} onChange={() => toggleArrayFilter('statuses', status as LeadStatus)} className="w-4 h-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" />
                  <span className="ml-2 text-sm text-gray-700 capitalize">{status}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">Service Type</label>
            <select value={filters.service} onChange={(e) => updateFilter('service', e.target.value)} className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
              <option value="all">All Services</option>
              <option value="landscaping">Landscaping</option>
              <option value="remodeling">Remodeling</option>
              <option value="roofing">Roofing</option>
              <option value="fencing">Fencing</option>
              <option value="hvac">HVAC</option>
              <option value="plumbing">Plumbing</option>
              <option value="painting">Painting</option>
              <option value="flooring">Flooring</option>
            </select>
          </div>

          {campaigns.length > 0 && (
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">Campaign</label>
              <select value={filters.campaign} onChange={(e) => updateFilter('campaign', e.target.value)} className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                <option value="all">All Campaigns</option>
                {campaigns.map(campaign => (
                  <option key={campaign} value={campaign}>{campaign}</option>
                ))}
              </select>
            </div>
          )}
        </div>
      </aside>

      <main className="flex-1 overflow-hidden flex flex-col">
        <div className="bg-white border-b border-gray-200 px-6 py-4">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Leads</h1>
              <p className="text-sm text-gray-500 mt-1">
                {totalCount} total {totalCount === 1 ? 'lead' : 'leads'}
                {hasActiveFilters && ` (filtered)`}
              </p>
            </div>
            <div className="flex items-center gap-3">
              <button onClick={exportToCSV} disabled={leads.length === 0} className="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2">
                <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Export CSV
              </button>
              <button className="px-4 py-2 bg-indigo-600 text-white rounded-lg text-sm font-medium hover:bg-indigo-700 flex items-center gap-2">
                <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
                Create Lead
              </button>
            </div>
          </div>

          <div className="flex items-center gap-3">
            <label className="text-sm text-gray-600">Sort by:</label>
            <select value={sortBy} onChange={(e) => setSortBy(e.target.value as any)} className="border border-gray-300 rounded-lg px-3 py-1.5 text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
              <option value="leadScore">AI Score</option>
              <option value="tier">Tier</option>
              <option value="createdAt">Date Created</option>
            </select>
            <button onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')} className="p-1.5 border border-gray-300 rounded-lg hover:bg-gray-50" title={sortOrder === 'asc' ? 'Ascending' : 'Descending'}>
              {sortOrder === 'asc' ? (
                <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                </svg>
              ) : (
                <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              )}
            </button>
          </div>
        </div>

        <div className="flex-1 overflow-auto">
          {leads.length === 0 ? (
            <div className="flex items-center justify-center h-full">
              <div className="text-center max-w-md">
                <div className="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                  <svg className="w-8 h-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  {hasActiveFilters ? 'No leads match your filters' : 'No leads yet'}
                </h3>
                <p className="text-gray-500 mb-6">
                  {hasActiveFilters ? 'Try adjusting your filters to see more results.' : 'Get started by creating your first lead or importing from CSV.'}
                </p>
                {hasActiveFilters ? (
                  <button onClick={clearFilters} className="px-4 py-2 text-indigo-600 border border-indigo-600 rounded-lg hover:bg-indigo-50 font-medium">Clear Filters</button>
                ) : (
                  <button className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 font-medium">Create Your First Lead</button>
                )}
              </div>
            </div>
          ) : (
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50 sticky top-0">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Score</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tier</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Campaign</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contacts</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Updated</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {leads.map((lead) => (
                  <tr key={lead.id} onClick={() => showToast.success('Lead detail modal coming soon')} className="hover:bg-gray-50 cursor-pointer transition-colors">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex items-center justify-center w-12 h-12 rounded-full font-bold ${getScoreColor(lead.leadScore)}`}>{lead.leadScore}</span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTierColor(lead.tier)}`}>T{lead.tier}</span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{lead.firstName} {lead.lastName}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500">{lead.email}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{lead.city}, {lead.state}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900 capitalize">{lead.serviceInterest.replace(/_/g, ' ')}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500">{lead.campaign || '-'}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(lead.status)}`}>{lead.status}</span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{lead.contactCount || 0}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500">{formatRelativeTime(lead.updatedAt)}</div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>

        {totalPages > 1 && (
          <div className="bg-white border-t border-gray-200 px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="text-sm text-gray-700">Page {currentPage} of {totalPages}</div>
              <div className="flex items-center gap-2">
                <button onClick={() => setCurrentPage(Math.max(1, currentPage - 1))} disabled={currentPage === 1} className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">Previous</button>
                <div className="flex items-center gap-1">
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    let pageNum
                    if (totalPages <= 5) {
                      pageNum = i + 1
                    } else if (currentPage <= 3) {
                      pageNum = i + 1
                    } else if (currentPage >= totalPages - 2) {
                      pageNum = totalPages - 4 + i
                    } else {
                      pageNum = currentPage - 2 + i
                    }
                    return (
                      <button key={pageNum} onClick={() => setCurrentPage(pageNum)} className={`px-3 py-2 rounded-lg text-sm font-medium ${currentPage === pageNum ? 'bg-indigo-50 text-indigo-600' : 'text-gray-700 hover:bg-gray-50'}`}>{pageNum}</button>
                    )
                  })}
                </div>
                <button onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))} disabled={currentPage === totalPages} className="px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">Next</button>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  )
}
